/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package toye.nakamurazacharyu3a4aststringmethods;

/**
 *
 * @author Zachary Toye-Nakamura
 * Date: Aug 11, 2023
 * A short program that showcases custom string methods.
 * The user and interact with 8 different string methods using text fields and buttons.
 * 
 */
public class frmSuperSringMethod extends javax.swing.JFrame {

    // Declaring what are vowels
    final String [] STRVOWELS = {"a", "e" , "i", "o", "u", "y"};
    // Declaring what are captials letters are
    final String [] STRCAPTIALS = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
    // Declaring what numbers are
    final String [] STRNUMS = {"0","1","2","3","4","5","6","7","8","9"};
    /**
     * Creates new form frmSuperSringMethod
     */
    public frmSuperSringMethod() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblMethod1Title = new javax.swing.JLabel();
        btnMethod1Confirm = new javax.swing.JButton();
        lblMethod1Subtitle = new javax.swing.JLabel();
        lblLenOfString1 = new javax.swing.JLabel();
        lblVowelsString1 = new javax.swing.JLabel();
        lblCaptialsString1 = new javax.swing.JLabel();
        lblFirst5CharString1 = new javax.swing.JLabel();
        lblMethod2Title = new javax.swing.JLabel();
        lblMethod2Subtitle = new javax.swing.JLabel();
        txtMethod1String = new javax.swing.JTextField();
        txtMethod2String = new javax.swing.JTextField();
        txtMethod2Substring = new javax.swing.JTextField();
        lblMethod2Answer = new javax.swing.JLabel();
        btnMethod2Confirm = new javax.swing.JButton();
        lblMethod3Title = new javax.swing.JLabel();
        btnMethod3Confirm = new javax.swing.JButton();
        txtMethod3Char = new javax.swing.JTextField();
        txtMethod3String = new javax.swing.JTextField();
        lblMethod3Answer = new javax.swing.JLabel();
        lblMethod4Title = new javax.swing.JLabel();
        txtMethod4String = new javax.swing.JTextField();
        btnMethod4Confirm = new javax.swing.JButton();
        lblMethod4Answer = new javax.swing.JLabel();
        lblMethod5Answer = new javax.swing.JLabel();
        lblMethod5Title = new javax.swing.JLabel();
        btnMethod5Confirm = new javax.swing.JButton();
        txtMethod5String = new javax.swing.JTextField();
        lblMethod6Answer = new javax.swing.JLabel();
        btnMethod6Confirm = new javax.swing.JButton();
        lblMethod6Title = new javax.swing.JLabel();
        txtMethod6String1 = new javax.swing.JTextField();
        txtMethod6String2 = new javax.swing.JTextField();
        txtMethod6String3 = new javax.swing.JTextField();
        lblMethod7Answer = new javax.swing.JLabel();
        btnMethod7Confirm = new javax.swing.JButton();
        txtMethod7String = new javax.swing.JTextField();
        lblMethod7Title = new javax.swing.JLabel();
        lblMethod8Answer = new javax.swing.JLabel();
        btnMethod8Confirm = new javax.swing.JButton();
        txtMethod8Shift = new javax.swing.JTextField();
        lblMethod8Title = new javax.swing.JLabel();
        txtMethod8String = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        lblTitle.setText("Super String Software");

        lblMethod1Title.setText("Enter A string to get some information on it");

        btnMethod1Confirm.setText("Enter");
        btnMethod1Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod1ConfirmActionPerformed(evt);
            }
        });

        lblMethod1Subtitle.setText("String Stats");

        lblLenOfString1.setText("The length of your string is:");

        lblVowelsString1.setText("Number of vowels your string has:");

        lblCaptialsString1.setText("Number of captials in your string:");

        lblFirst5CharString1.setText("The first 5 characters of your string are:");

        lblMethod2Title.setText("Enter a string below.");

        lblMethod2Subtitle.setText("Enter a second string, to find the number of times the second string appears in the first string");

        txtMethod1String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtMethod2String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtMethod2Substring.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMethod2Substring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMethod2SubstringActionPerformed(evt);
            }
        });

        lblMethod2Answer.setText("There are n appearances of <string2> in <string1>");

        btnMethod2Confirm.setText("NumOccurances");
        btnMethod2Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod2ConfirmActionPerformed(evt);
            }
        });

        lblMethod3Title.setText("Enter a string below.                 Enter a character to find the indexes that the character can be found at in the string.");

        btnMethod3Confirm.setText("Indexes of character");
        btnMethod3Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod3ConfirmActionPerformed(evt);
            }
        });

        txtMethod3Char.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMethod3Char.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMethod3CharActionPerformed(evt);
            }
        });

        txtMethod3String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblMethod3Answer.setText("The character <character> appears at indexes <LIST OF INDEXES> in <string1>");

        lblMethod4Title.setText("Enter a string, to get back a string that has all it's vowels in lowercase, and all it's consonants in uppercase.");

        txtMethod4String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnMethod4Confirm.setText("Special string");
        btnMethod4Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod4ConfirmActionPerformed(evt);
            }
        });

        lblMethod4Answer.setText("Your modified string is: <string 1 but special>");

        lblMethod5Answer.setText("The sum of the digits in the string is <sum>");

        lblMethod5Title.setText("Enter a string, to get back the sum of digits in the string. Ex \"hello13\" is 4 because 1 + 3 = 4");

        btnMethod5Confirm.setText("Sum Digits");
        btnMethod5Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod5ConfirmActionPerformed(evt);
            }
        });

        txtMethod5String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblMethod6Answer.setText("The strings in order are: <string1>, <string2>, <string3>");

        btnMethod6Confirm.setText("Compare");
        btnMethod6Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod6ConfirmActionPerformed(evt);
            }
        });

        lblMethod6Title.setText("Enter 3 strings to get back which string is first lexicographically");

        txtMethod6String1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtMethod6String2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMethod6String2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMethod6String2ActionPerformed(evt);
            }
        });

        txtMethod6String3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblMethod7Answer.setText("The string in Title form is <string>");

        btnMethod7Confirm.setText("To Title");
        btnMethod7Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod7ConfirmActionPerformed(evt);
            }
        });

        txtMethod7String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblMethod7Title.setText("Enter a string to get back the string back in \"Title form\" (The First Letter Of Each Word Is A Capital. (already capitalized letter will remain capitals))");

        lblMethod8Answer.setText("The string after the shift is: <encrypted string>");

        btnMethod8Confirm.setText("Encrypt");
        btnMethod8Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMethod8ConfirmActionPerformed(evt);
            }
        });

        txtMethod8Shift.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMethod8Shift.setText("0");
        txtMethod8Shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMethod8ShiftActionPerformed(evt);
            }
        });

        lblMethod8Title.setText("Enter a string and a shift amount to get back the string cesear cipher shifted right by the shift amount (letters only)");

        txtMethod8String.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMethod2String, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMethod2Title))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMethod2Substring, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(btnMethod2Confirm))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMethod3String, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMethod3Char, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnMethod3Confirm))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMethod6String1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMethod6String2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMethod6String3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(btnMethod6Confirm))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMethod7String, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(197, 197, 197)
                                .addComponent(btnMethod7Confirm))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMethod8String, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMethod8Shift, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82)
                                .addComponent(btnMethod8Confirm))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMethod5String, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(182, 182, 182)
                                .addComponent(btnMethod5Confirm))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMethod4String, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(169, 169, 169)
                                .addComponent(btnMethod4Confirm)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMethod7Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMethod4Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMethod5Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMethod6Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMethod8Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMethod3Answer)
                            .addComponent(lblMethod2Answer, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblMethod8Title))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblMethod7Title))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblMethod6Title))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(txtMethod1String, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(11, 11, 11)
                                        .addComponent(btnMethod1Confirm))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(lblMethod1Title, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblMethod1Subtitle)
                                        .addComponent(lblFirst5CharString1))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(lblCaptialsString1))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblVowelsString1)
                                            .addComponent(lblLenOfString1, javax.swing.GroupLayout.Alignment.TRAILING)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(lblMethod2Subtitle))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblMethod3Title))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblMethod4Title))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblMethod5Title, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(225, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMethod1Title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMethod1String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMethod1Confirm))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMethod2Subtitle)
                            .addComponent(lblMethod2Title))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMethod2String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMethod2Substring, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMethod2Confirm)
                            .addComponent(lblMethod2Answer)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMethod1Subtitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLenOfString1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVowelsString1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCaptialsString1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFirst5CharString1)))
                .addGap(18, 18, 18)
                .addComponent(lblMethod3Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod3String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMethod3Char, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethod3Confirm)
                    .addComponent(lblMethod3Answer))
                .addGap(18, 18, 18)
                .addComponent(lblMethod4Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod4String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethod4Confirm)
                    .addComponent(lblMethod4Answer))
                .addGap(18, 18, 18)
                .addComponent(lblMethod5Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod5String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethod5Confirm)
                    .addComponent(lblMethod5Answer))
                .addGap(18, 18, 18)
                .addComponent(lblMethod6Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod6String1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethod6Confirm)
                    .addComponent(lblMethod6Answer)
                    .addComponent(txtMethod6String2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMethod6String3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblMethod7Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod7String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethod7Confirm)
                    .addComponent(lblMethod7Answer))
                .addGap(18, 18, 18)
                .addComponent(lblMethod8Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMethod8String, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMethod8Confirm)
                    .addComponent(lblMethod8Answer)
                    .addComponent(txtMethod8Shift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(196, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMethod1ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod1ConfirmActionPerformed
        // TODO add your handling code here:
        // This code is not optimal for time or space.
        
        // The user wants output for method 1
        // Displaying the length of the string
        lblLenOfString1.setText("The length of your string is: " + txtMethod1String.getText().length());
        // Declare a variable to hold the total number of vowels and the total number of captials in the string
        int intTotalVowels = 0, intTotalCaptials = 0;
        // looping through all of the characters in the inputted string
        for (int  i = 0; i < txtMethod1String.getText().length(); i++)
        {
            // looping through all of the vowels to check if the character at i in the string is a vowel
            for (int j = 0; j < 6; j++) // STRVOWELS.length would be better but haven't learned it
            {
                // If the character at i is a vowel then increase the total amount of vowels, (toLowerCase because I don't care about captialization)
                if(txtMethod1String.getText().toLowerCase().substring(i,i+1).equals(STRVOWELS[j])) intTotalVowels++;
            }
            // looping through all of the captials
            for (int j = 0; j < 26; j++) // STRCAPTIALS.length would be better but haven't learned it (maybe we have but I forgot)
            {
                // If the character is a captial then increase the variable that stores the count of the total captials in the string
                if(txtMethod1String.getText().substring(i,i+1).equals(STRCAPTIALS[j])) intTotalCaptials++;
            }
        }
        // Display the number of vowels in the string to the user
        lblVowelsString1.setText("Number of vowels your string has: " + intTotalVowels);
        // Display the number of captials in the string to the user
        lblCaptialsString1.setText("Number of captials in your string: " + intTotalCaptials);
        // If the string is shorter than or equal to 5 characters long then display the whole string
        if (txtMethod1String.getText().length() <= 5) lblFirst5CharString1.setText("The first 5 characters of your string are: " + txtMethod1String.getText());
        // Otherwise display the substring of [0,5) of the string
        else lblFirst5CharString1.setText("The first 5 characters of your string are: " + txtMethod1String.getText().substring(0,5));
        
    }//GEN-LAST:event_btnMethod1ConfirmActionPerformed

    private void txtMethod2SubstringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMethod2SubstringActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtMethod2SubstringActionPerformed

    private void btnMethod2ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod2ConfirmActionPerformed
        // TODO add your handling code here:
        
        // The user wants output for method 2
        // Error Flag is a variable that will tell the rest of the program to run or not. (makeshift break statement when combiened with if statements)
        int intErrorFlag = 0;
        // Declare a variable to hold the number of times the substring appears in the string
        int intAppearances = 0;
        // If the substring is longer than the string, then it will never be contained the string, also my program would crash so don't do anything else, (also a edge case of the substring being nothing, where there should be 0 appearances of nothing)
        if (txtMethod2String.getText().length() < txtMethod2Substring.getText().length() || txtMethod2Substring.getText().equals(""))
        {
            // Set the error flag to 1, telling the rest of the program to not run
            intErrorFlag = 1;
        }
        if (intErrorFlag == 0)
        {
            // Basic Sliding Window type problem, (it could also be done by spamming if substring(i, i + len(substring) == substring)tot++ using a for loop, but it's worse time complexity)
            // Declare a variable that will hold the current part of the string that the program is looking at, it first needs to look at 0 - n where n is the length of the substring
            String strWindow = txtMethod2String.getText().substring(0, txtMethod2Substring.getText().length());
            // First check if the current window is equal to the substring, if it is increase the number of appearances
            if (strWindow.equals(txtMethod2Substring.getText())) intAppearances++;
            
            // For the rest of the characters in the string, after taking n where n is the len(substring)
            for (int i  = txtMethod2Substring.getText().length(); i < txtMethod2String.getText().length(); i++)
            {
                // Slide the window over by removing the first character of the window, and adding the next character in sequenece (in string)
                strWindow = strWindow.substring(1,strWindow.length()) + txtMethod2String.getText().substring(i,i+1);
                // Then check if the window and the substring are equal, if so increment appearances
                if (strWindow.equals(txtMethod2Substring.getText())) intAppearances++;
            }
        }
        // Display the number of appearances of the substring in string.
        lblMethod2Answer.setText("There are "+intAppearances+" appearances of "+txtMethod2Substring.getText()+" in "+txtMethod2String.getText());
    }//GEN-LAST:event_btnMethod2ConfirmActionPerformed

    private void btnMethod3ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod3ConfirmActionPerformed
        // TODO add your handling code here:
        // The user wants output for method 3
        
        // Declare a variable to hold the output
        String strOutput = "";
        // Declare a error flag incase more than 1 character is input, (0 is fine, 1 is error)
        int intErrorFlag = 0;
        // If the length of the char entered is not 1, display a error.
        if (txtMethod3Char.getText().length() != 1) intErrorFlag = 1;
        // If there is no error
        if (intErrorFlag == 0)
        {
            // Loop through every character in the string
            for (int i = 0; i < txtMethod3String.getText().length(); i++) 
            {
                // If the character is equal to the char then add the index to the output
                if (txtMethod3String.getText().substring(i,i+1).equals(txtMethod3Char.getText())) strOutput += (i + ", ");
            }   
        }
        // If there is a error, then output the error message
        if (intErrorFlag == 1) lblMethod3Answer.setText("Please enter exactly just 1 character in the character box.");
        else
        {
            // If there is no indexes to output, display to the user that the character doesnt appear in the string entered
            if(strOutput.equals(""))lblMethod3Answer.setText("The character "+txtMethod3Char.getText()+" doesn't appear in " +txtMethod3String.getText());
            // Otherwise display the indexes that they character is found at
            else lblMethod3Answer.setText("The character "+txtMethod3Char.getText()+" appears at indexes ["+strOutput.substring(0,strOutput.length()-2)+"] in " +txtMethod3String.getText());
        }
    }//GEN-LAST:event_btnMethod3ConfirmActionPerformed

    private void txtMethod3CharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMethod3CharActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMethod3CharActionPerformed

    private void btnMethod4ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod4ConfirmActionPerformed
        // TODO add your handling code here:
        // The user wants output for method 4
        
        // Declare a variable to hold the output
        String strOutput = "";
        
        // For all of the characters in the inputted string
        for (int i = 0; i < txtMethod4String.getText().length(); i++)
        {
            // A variable to store if a character has been added to the output for index i, (0 for no, 1 for yes)
            int intIsAdded = 0;
            // Loop through all of the character, to check if it's a letter, case doesn't matter
            for (int j = 0; j < 26; j++) // No idea if I am allowed use strCaptial.length so I won't
            {
                // check if the character at index i in the string is a letter, case changed to upper because it doesn't matter
                if (txtMethod4String.getText().toUpperCase().substring(i,i+1).equals(STRCAPTIALS[j]))
                {
                    // If it is, then check if it's a vowel by looping over all of the vowels
                    for (int k = 0; k < 5; k++) // .length confusion continues
                    {
                        if (txtMethod4String.getText().toLowerCase().substring(i,i+1).equals(STRVOWELS[k])) 
                        {
                            // Set is added to true, so the program doesnt add multiple character for index i
                            intIsAdded = 1;
                            // Add the vowel to the back of the string that will be outputted
                            strOutput += STRVOWELS[k];
                        }
                    }
                    // If it's not a vowel and it's equal to the letter then append it to the end of the output
                    if (intIsAdded == 0) 
                    {
                        // Append the letter to the end of output
                        strOutput += STRCAPTIALS[j];
                        // Set is added to true, so the program doesnt add multiple character for index i
                        intIsAdded = 1;
                    }
                }
            }
            // If no character was added then it must not be a letter so just add it.
            if (intIsAdded == 0) strOutput += txtMethod4String.getText().substring(i,i+1);
        }
        // Display the answer to the user
        lblMethod4Answer.setText("Your modified string is: "+strOutput);
    }//GEN-LAST:event_btnMethod4ConfirmActionPerformed

    private void btnMethod5ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod5ConfirmActionPerformed
        // TODO add your handling code here:
        // Addition of digits means that the string "1000" is equal to 1 + 0 + 0 + 0 = 1
        // The string "a43BadafaE@#%6" = 4 + 3 + 6 = 13
        // The user wants output for method 5
        // declare a variable to hold the output
        int intOutput = 0;
        
        // Loop through all of the the characters in string
        for (int i = 0; i < txtMethod5String.getText().length(); i++)
        {
            // Then for each character check if it's a number 
            for (int j = 0; j < 10; j++) // again is STRNUMS.length legal??? 
            {
                // if the character a index i is a number then increase output by the number
                if (txtMethod5String.getText().substring(i,i+1).equals(STRNUMS[j])) intOutput += Integer.parseInt(STRNUMS[j]);
            }
        }
        // Display the output to the user
        lblMethod5Answer.setText("The sum of the digits in the string is "+intOutput);
    }//GEN-LAST:event_btnMethod5ConfirmActionPerformed

    private void btnMethod6ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod6ConfirmActionPerformed
        // TODO add your handling code here:
        // The user wants output for method 6
        // There is a MUCH BETTER WAY but I don't want to write up a sort
        
        // A comes first and Z comes last
        // Declare a variable holding all of the user's strings, that should be sorted
        String [] strSortedStrs = {txtMethod6String1.getText(),txtMethod6String2.getText(),txtMethod6String3.getText()};
        
        // Compare the elements at i, and j. if i < j then swap them
        // if the string stored in position j comes before the string stored in position i
        
        // Compare 1 and 2, first to proplery sort them
        if(strSortedStrs[1].compareTo(strSortedStrs[2]) > 0)
        {
            // declare a temporary string to hold the string that is being overwritten
            String strTemp = strSortedStrs[1];
            // Replace the string at position 1, with the string at position 2, because the string at 2 comes first
            strSortedStrs[1] = strSortedStrs[2];
            // Replace the string at position 2, with the string that WAS at position 1.
            strSortedStrs[2] = strTemp;
        }
        // Compare 0 to 1, if it's less or equal then do nothing (already sorted)
        if(strSortedStrs[0].compareTo(strSortedStrs[1]) > 0)
        {
            // Check if it is less than the currently known last alphabetically known string (if so make it last in line)
            if(strSortedStrs[0].compareTo(strSortedStrs[2]) > 0)
            {
                // declare a temporary string to hold the string that is being overwritten
                String strTemp = strSortedStrs[0];
                // Shift 1 to the first spot
                strSortedStrs[0] = strSortedStrs[1];
                // Shift 2 to the second spot
                strSortedStrs[1] = strSortedStrs[2];
                // Add the least alphabetic string at the end
                strSortedStrs[2] = strTemp;
            }
            // other wise put it between 1 and 2 by shifting 1 forward to 0 and inserting it to 1
            else
            {
            // declare a temporary string to hold the string that is being overwritten
            String strTemp = strSortedStrs[0];
            // Replace the string at position i, with the string at position j, because j comes first
            strSortedStrs[0] = strSortedStrs[1];
            // Replace the string at position j, with the string that WAS at position i.
            strSortedStrs[1] = strTemp;
            }
        }
        // Finally display the correct order to the user
        lblMethod6Answer.setText("The strings in order are: "+strSortedStrs[0]+", "+strSortedStrs[1]+", "+strSortedStrs[2]);
    }//GEN-LAST:event_btnMethod6ConfirmActionPerformed

    private void txtMethod6String2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMethod6String2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMethod6String2ActionPerformed

    private void btnMethod7ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod7ConfirmActionPerformed
        // TODO add your handling code here
        // The user wants output for method 7
        
        // Declare a variable to hold the output
        String strOutput = "";
        // Declare a variable to store if the next character should be captialized
        boolean boolCapitalize = true;
        // loop over all of the characters
        for (int i = 0; i < txtMethod7String.getText().length(); i++)
        {
            // A variable to check if a the character at index i in the string is a letter
            boolean boolIsAlpha = false;
            // Check if the character is a space
            if (txtMethod7String.getText().substring(i,i+1).equals(" ")) 
            {
                // if it is then attempt to capitalize the next character
                boolCapitalize = true;
                // Add the space to the output
                strOutput += " ";
            }
            // otherwise
            else
            {
                // If the letter should be a capital then attempt to.
                if (boolCapitalize)
                {
                    // Loop over every letter and check if it's a letter
                    for (int j = 0; j < 26; j++)
                    {
                        if (txtMethod7String.getText().toUpperCase().substring(i,i+1).equals(STRCAPTIALS[j]))
                        {
                            // set is alpha to true because the character is a letter
                            boolIsAlpha = true;
                            // Add the character to the output but as a capital
                            strOutput += STRCAPTIALS[j];
                        }
                    }
                    // If the character wasn't a letter then just add the character without capitalization
                    if (!boolIsAlpha)strOutput += txtMethod7String.getText().substring(i,i+1);
                }
                // Otherwise just add the character on to the end of the output
                else strOutput += txtMethod7String.getText().substring(i,i+1);
                // if the character isn't a space then it don't attempt to captialize the next character
                boolCapitalize = false; 
            }
        }
        // Display the output to the user
        lblMethod7Answer.setText("The string in Title form is " + strOutput);
    }//GEN-LAST:event_btnMethod7ConfirmActionPerformed

    private void btnMethod8ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMethod8ConfirmActionPerformed
        // TODO add your handling code here:
        
        // Not efficent because where ord()  + chr() or just c++ straight up static_cast<char>((text[i] - 'A' + shift)%26+'A')
        // Declare a var to hold the output
        String strOutput = "";
        // Declare a variable to hold the error flag
        boolean boolErrorFlag = false;
        // Iterate over every character in the input string
        for (int i = 0; i < txtMethod8String.getText().length(); i++)
        {
            // If there is no error yet
            if (!boolErrorFlag)
            {
                // A variable to track if the character at index 1 in the string is a alphabetically character
                boolean boolIsAlpha = false; // pretty sure this is a taught data type
                // Check if it's a member of the alphabet (by looping over every letter)
                for (int j = 0; j < 26; j++) // still not sure about STRCAPITALS.length
                {
                    // Then if it's a letter 
                    if (txtMethod8String.getText().toUpperCase().substring(i,i+1).equals(STRCAPTIALS[j]))
                    {
                        //Add it to the output but shift it over by the shift amount (% 26 because after z is a)
                        strOutput += STRCAPTIALS[(j+Integer.parseInt(txtMethod8Shift.getText()))%26]+ "";
                        // Set the is alpha to true, telling the program that there is no error yet
                        boolIsAlpha = true;
                    }
                }
                // else set the error code and don't do anything
                if (boolIsAlpha == false) boolErrorFlag = true;
            }
        }
        // If there was a error, display the error message to the user
        if (boolErrorFlag) lblMethod8Answer.setText("Please only enter alphabetical characters!");
        // otherwise show the user the output.
        else lblMethod8Answer.setText("The string after the shift is: " + strOutput);
    }//GEN-LAST:event_btnMethod8ConfirmActionPerformed

    private void txtMethod8ShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMethod8ShiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMethod8ShiftActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmSuperSringMethod.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmSuperSringMethod.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmSuperSringMethod.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmSuperSringMethod.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmSuperSringMethod().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMethod1Confirm;
    private javax.swing.JButton btnMethod2Confirm;
    private javax.swing.JButton btnMethod3Confirm;
    private javax.swing.JButton btnMethod4Confirm;
    private javax.swing.JButton btnMethod5Confirm;
    private javax.swing.JButton btnMethod6Confirm;
    private javax.swing.JButton btnMethod7Confirm;
    private javax.swing.JButton btnMethod8Confirm;
    private javax.swing.JLabel lblCaptialsString1;
    private javax.swing.JLabel lblFirst5CharString1;
    private javax.swing.JLabel lblLenOfString1;
    private javax.swing.JLabel lblMethod1Subtitle;
    private javax.swing.JLabel lblMethod1Title;
    private javax.swing.JLabel lblMethod2Answer;
    private javax.swing.JLabel lblMethod2Subtitle;
    private javax.swing.JLabel lblMethod2Title;
    private javax.swing.JLabel lblMethod3Answer;
    private javax.swing.JLabel lblMethod3Title;
    private javax.swing.JLabel lblMethod4Answer;
    private javax.swing.JLabel lblMethod4Title;
    private javax.swing.JLabel lblMethod5Answer;
    private javax.swing.JLabel lblMethod5Title;
    private javax.swing.JLabel lblMethod6Answer;
    private javax.swing.JLabel lblMethod6Title;
    private javax.swing.JLabel lblMethod7Answer;
    private javax.swing.JLabel lblMethod7Title;
    private javax.swing.JLabel lblMethod8Answer;
    private javax.swing.JLabel lblMethod8Title;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVowelsString1;
    private javax.swing.JTextField txtMethod1String;
    private javax.swing.JTextField txtMethod2String;
    private javax.swing.JTextField txtMethod2Substring;
    private javax.swing.JTextField txtMethod3Char;
    private javax.swing.JTextField txtMethod3String;
    private javax.swing.JTextField txtMethod4String;
    private javax.swing.JTextField txtMethod5String;
    private javax.swing.JTextField txtMethod6String1;
    private javax.swing.JTextField txtMethod6String2;
    private javax.swing.JTextField txtMethod6String3;
    private javax.swing.JTextField txtMethod7String;
    private javax.swing.JTextField txtMethod8Shift;
    private javax.swing.JTextField txtMethod8String;
    // End of variables declaration//GEN-END:variables
}
