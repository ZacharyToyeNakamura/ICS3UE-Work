/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package toye.nakamurazacharyu4act2;

/**
 *
 * @author Zachary Toye-Nakamura
 * Date: Aug 17, 2023
 * A small program that helps the user with 3 simple tasks. Finding factorials, fibonacci numbers and checking if a number is prime.
 * This program assumes that 144 is the 13th term of the fibonacci sequence as Mr Jeg said, and it starts with 0, 1, 1. So F(1) = 0, F(2) = 1. . .
 * 
 * 
 * Wish I knew matrix expansion for fibonacci numbers . . . . (please teach me)
 * Wish I knew sieve of something for finding/checking primes
 */

public class frmU2ACT2 extends javax.swing.JFrame {

    /**
     * Creates new form frmU2ACT2
     */
    public frmU2ACT2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblFactorialTitle = new javax.swing.JLabel();
        txtFactorialInput = new javax.swing.JTextField();
        btnFactorial = new javax.swing.JButton();
        lblFactorialAns = new javax.swing.JLabel();
        lblPrimeTitle = new javax.swing.JLabel();
        txtPrimeInput = new javax.swing.JTextField();
        btnPrime = new javax.swing.JButton();
        lblPrimeAns = new javax.swing.JLabel();
        lblFibAns = new javax.swing.JLabel();
        lblFibTitle = new javax.swing.JLabel();
        txtFibInput = new javax.swing.JTextField();
        btnFib = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel1.setText("--NUMBERS--");

        lblFactorialTitle.setText("Enter a number and click the button to find the factorial");

        txtFactorialInput.setToolTipText("");

        btnFactorial.setText("Factorial");
        btnFactorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFactorialActionPerformed(evt);
            }
        });

        lblPrimeTitle.setText("Enter a number and click the button to determine whether or not it is a prime number");

        txtPrimeInput.setToolTipText("");

        btnPrime.setText("Prime");
        btnPrime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeActionPerformed(evt);
            }
        });

        lblFibTitle.setText("Enter a number and click the button to see the corresponding Fibonacci Number.");

        txtFibInput.setToolTipText("");

        btnFib.setText("Fibonacci");
        btnFib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFibActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFactorialInput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(127, 127, 127)
                                .addComponent(btnFactorial)
                                .addGap(18, 18, 18)
                                .addComponent(lblFactorialAns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblFactorialTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPrimeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(130, 130, 130)
                                .addComponent(btnPrime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPrimeAns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblPrimeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFibInput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(130, 130, 130)
                                .addComponent(btnFib)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblFibAns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblFibTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lblFactorialTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFactorialAns, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFactorial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFactorialInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblPrimeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrimeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrime)
                    .addComponent(lblPrimeAns, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblFibTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFibInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFib)
                    .addComponent(lblFibAns, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This Method finds the factorial of any positive integer passed to it.
     * Equation: n!
     * @param intNum A positive integer
     * @return The result of the mathematical formula intNum!
     */
    public static int factorial(int intNum)
    {
        // Declare a variable to hold the total
        int intTot = 1;
        // multiple total by all of the numbers up to the number
        for (int i = 1; i <= intNum; i++) intTot *= i;
        // Return the total
        return intTot;
    }
    
    
    /**
     * This method returns a bool value if a number is prime or not.
     * Equation: (for i in range(sqrt(n)) n % i == 0) is any value is true then n isn't prime.
     * @param intNum A positive integer value that is greater than 1.
     * @return True if the number passed to it is a prime, and false if the number passed isn't prime
     * 
     * prime numbers are positive integers greater than 1 with exactly two factors, 1 and the number itself.
     */
    public static boolean isPrime(int intNum)
    {
        // All numbers that are equal to or less than 1 aren't prime.
        if (intNum < 2) return false;
        // init a variable to hold if the number is prime or not
        boolean boolIsPrime = true;
        // Loop through all numbers up to it's square root + 1, because that's all that's needed (factors have 1 about the sqrt and 1 below)
        // starting at 2 because it's expected to be divisable by 1.
        // If any of the numbers are a factor of i then set is prime to false
        for (int i = 2; i < (int)Math.sqrt(intNum) + 1; i++) if(intNum % i == 0) boolIsPrime = false;
        // return the answer
        return boolIsPrime;
    }
    
    
    /**
     * This method returns the (intNum)th fibonacci number 
     * Matrix expansion could be used if I knew how it worked + was allow to use 2d arrays.
     * @param intNum - A positive integer
     * @return The (intNum)th fibonacci number (though it may overflow it intNum is too high)
     */
    public static int fibonacci(int intNum)
    {
        // Declare the last term and the current term
        int intLast = 0, intCur = 1;
        // Edge case of the first term, return the first term
        if (intNum == 1) return intLast;
        // Edge case of the second term, return the first term
        if (intNum == 2) return intCur;
        
        for (int i = 2; i < intNum; i++) 
        {
            // Temporarly hold the current term
            int intTemp = intCur;
            // Make the current term the last term
            intCur = intLast + intCur;
            // Set the last term to the "current" term
            intLast = intTemp;
        }
        // Return the answer
        return intCur;
    }
    
    /**
     * This method will valid input checking if it can be parse for a positive integer.
     * @param strInput Any string
     * @return True if strInput is valid and can be used, else it will return false.
     */
    public static boolean isValid(String strInput)
    {
        // Try
        try
        {
            // It is a positive int value so it's valid.
            if (Integer.parseInt(strInput) >= 0) return true;
            // It's not a positive int
            else return false;
        }
        catch (Exception InputMismatchException)
        {
            // It's not valid
            return false;
        }
    }
    
    
    private void btnFactorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFactorialActionPerformed
        // TODO add your handling code here:
        // The user wants to use the factorial feature.
        
        // First declare a variable to hold if the text is valid and initialize it.
        boolean boolIsValid = isValid(txtFactorialInput.getText());
        // If it isn't valid 
        if (!boolIsValid)
        {
            // Display a error message
            lblFactorialAns.setText("Error: Please enter a positive integer.");
            // Don't do anything else
            return;
        }
        // Display a message with the correct answer to the user
        lblFactorialAns.setText("The factorial of "+txtFactorialInput.getText()+" is "+factorial(Integer.parseInt(txtFactorialInput.getText())));
        
    }//GEN-LAST:event_btnFactorialActionPerformed

    private void btnPrimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeActionPerformed
        // TODO add your handling code here:
        // The user wants to use the prime checking feature

        // Try parsing the string to a int
        try 
        {
            // Declare a temp variable to hold the int
            int intTemp = Integer.parseInt(txtPrimeInput.getText());
            // If you can then check if it's prime and display the result to the user
            if (isPrime(Integer.parseInt(txtPrimeInput.getText())))lblPrimeAns.setText("The number " + txtPrimeInput.getText() + " is prime");
            // If it isn't prime the display that it isn't
            else lblPrimeAns.setText("The number " + txtPrimeInput.getText() + " isn't prime");
        }
        // There is a exception
        catch (Exception InputMismatchException)
        {
            // Dispaly a error message
            lblPrimeAns.setText("Error: Please enter a integer.");
        }

    }//GEN-LAST:event_btnPrimeActionPerformed

    private void btnFibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFibActionPerformed
        // TODO add your handling code here:
        // The user wants to use the fibonacci feature
        // Declare a variable to hold whether the input is valid or not
        boolean boolIsValid = isValid(txtFibInput.getText());
        // if it is invalid
        if (!boolIsValid || txtFibInput.getText().equals("0"))
        {
            // display a error message (0 isn't positive i think)
            lblFibAns.setText("Error: Please enter a positive integer.");
            // stop
            return;
        }
        // display the answer to the user
        lblFibAns.setText("The "+ txtFibInput.getText()+" number of the fibonacci numbers is " + fibonacci(Integer.parseInt(txtFibInput.getText())));
    }//GEN-LAST:event_btnFibActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmU2ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmU2ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmU2ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmU2ACT2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmU2ACT2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFactorial;
    private javax.swing.JButton btnFib;
    private javax.swing.JButton btnPrime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblFactorialAns;
    private javax.swing.JLabel lblFactorialTitle;
    private javax.swing.JLabel lblFibAns;
    private javax.swing.JLabel lblFibTitle;
    private javax.swing.JLabel lblPrimeAns;
    private javax.swing.JLabel lblPrimeTitle;
    private javax.swing.JTextField txtFactorialInput;
    private javax.swing.JTextField txtFibInput;
    private javax.swing.JTextField txtPrimeInput;
    // End of variables declaration//GEN-END:variables
}
